{"ast":null,"code":"// CityPage.vue\nimport HeaderComponent from './HeaderComponent.vue';\nimport FooterComponent from './FooterComponent.vue';\nimport { citiesData } from '../citiesData.js';\nexport default {\n  components: {\n    HeaderComponent,\n    FooterComponent\n  },\n  data() {\n    return {\n      city: null,\n      citiesData: citiesData\n    };\n  },\n  mounted() {\n    this.loadCityData();\n    this.$nextTick(() => {\n      const collapsibleElement = document.querySelector('.collapsible');\n      if (collapsibleElement) {\n        // eslint-disable-next-line no-undef\n        M.Collapsible.init(collapsibleElement);\n      }\n    });\n  },\n  methods: {\n    loadCityData() {\n      const cityId = this.$route.params.id;\n      // Find the city with the matching ID in citiesData\n      this.city = citiesData.find(city => city.id === parseInt(cityId));\n    },\n    getIconForMeasure(title) {\n      // Define mapping of measure titles to icons\n      const iconMap = {\n        'Rent Stabilization': 'apartment',\n        'Anti-Harassment Protections': 'security',\n        'Limits on Evictions Based on Non-Payment of Rent': 'house_with_shield',\n        'Relocation Assistance for Large Rent Increases': 'move_location',\n        'Tenant Buyout Safeguards': 'real_estate_agent',\n        'Proactive Code Enforcement': 'shield_lock',\n        'Fair Access and/or Anti-Discrimination Policies': 'policy',\n        'Codified Right to Counsel': 'gavel',\n        'Universal Just Cause Protections': 'vpn_lock'\n      };\n      return iconMap[title] || ''; // Return the corresponding icon or an empty string if not found\n    },\n\n    getScoreDescription(score, measureTitle) {\n      // Add logic to get the score descriptions based on measure title and score\n      // You can customize this based on your specific requirements\n      return 'Description for Score ' + score + ' in ' + measureTitle;\n    }\n  }\n};","map":{"version":3,"names":["HeaderComponent","FooterComponent","citiesData","components","data","city","mounted","loadCityData","$nextTick","collapsibleElement","document","querySelector","M","Collapsible","init","methods","cityId","$route","params","id","find","parseInt","getIconForMeasure","title","iconMap","getScoreDescription","score","measureTitle"],"sources":["/Users/caminibu/Documents/AEMP/tbor/src/components/CityPage.vue"],"sourcesContent":["<!-- CityPage.vue -->\n<template>\n  <div>\n    <header-component></header-component>\n    <!-- Content -->\n    <div class=\"container\">\n      <div class=\"section\">\n        <div class=\"row\">\n          <div class=\"col s12\">\n            <div class=\"card\">\n              <div class=\"card-content\">\n                <span class=\"card-title\" v-if=\"city\">\n                  {{ city.name }} Index Score: {{ city.score }}/9\n                </span>\n                <i class=\"tiny material-icons\">info_outline</i>\n                <span>Click the panels below to see how the score was evaluated.</span>\n\n                <!-- Check if city is not null before accessing measures -->\n                <ul class=\"collapsible\" v-collapsible>\n                <li v-for=\"measure in city.measures\" :key=\"measure.id\">\n                  <div class=\"collapsible-header\">\n                    <i class=\"material-icons\"><span class=\"material-symbols-outlined\">{{ getIconForMeasure(measure.title) }}</span></i>\n                    {{ measure.title }}\n                    <span class=\"new badge red\" data-badge-caption=\"0\"></span>\n                  </div>\n                  <div class=\"collapsible-body\">\n                    <table class=\"striped responsive-table\">\n                      <thead>\n                        <tr>\n                          <th>Quality Measure</th>\n                          <th>Score: 1</th>\n                          <th>Score: 0.5</th>\n                          <th>Score: 0</th>\n                        </tr>\n                      </thead>\n                      <tbody>\n                        <tr>\n                          <td>{{ measure.title }}</td>\n                          <td>{{ getScoreDescription(1, measure.title) }}</td>\n                          <td>{{ getScoreDescription(0.5, measure.title) }}</td>\n                          <td>{{ getScoreDescription(0, measure.title) }}</td>\n                        </tr>\n                      </tbody>\n                    </table>\n                  </div>\n                </li>\n              </ul>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n  <footer-component></footer-component>\n</template>\n\n<script>\n// CityPage.vue\nimport HeaderComponent from './HeaderComponent.vue';\nimport FooterComponent from './FooterComponent.vue';\nimport { citiesData } from '../citiesData.js';\n\nexport default {\n  components: {\n    HeaderComponent,\n    FooterComponent,\n  },\n  data() {\n    return {\n      city: null,\n      citiesData: citiesData,\n    };\n  },\n  mounted() {\n    this.loadCityData();\n    this.$nextTick(() => {\n      const collapsibleElement = document.querySelector('.collapsible');\n      if (collapsibleElement) {\n        // eslint-disable-next-line no-undef\n        M.Collapsible.init(collapsibleElement);\n      }\n    });\n  },\n  methods: {\n    loadCityData() {\n      const cityId = this.$route.params.id;\n      // Find the city with the matching ID in citiesData\n      this.city = citiesData.find((city) => city.id === parseInt(cityId));\n    },\n    getIconForMeasure(title) {\n    // Define mapping of measure titles to icons\n    const iconMap = {\n      'Rent Stabilization': 'apartment',\n      'Anti-Harassment Protections': 'security',\n      'Limits on Evictions Based on Non-Payment of Rent': 'house_with_shield',\n      'Relocation Assistance for Large Rent Increases': 'move_location',\n      'Tenant Buyout Safeguards': 'real_estate_agent',\n      'Proactive Code Enforcement': 'shield_lock',\n      'Fair Access and/or Anti-Discrimination Policies': 'policy',\n      'Codified Right to Counsel': 'gavel',\n      'Universal Just Cause Protections': 'vpn_lock'\n    };\n\n    return iconMap[title] || ''; // Return the corresponding icon or an empty string if not found\n    },\n    getScoreDescription(score, measureTitle) {\n      // Add logic to get the score descriptions based on measure title and score\n      // You can customize this based on your specific requirements\n      return 'Description for Score ' + score + ' in ' + measureTitle;\n    },\n  },\n};\n</script>\n"],"mappings":"AA0DA;AACA,OAAOA,eAAc,MAAO,uBAAuB;AACnD,OAAOC,eAAc,MAAO,uBAAuB;AACnD,SAASC,UAAS,QAAS,kBAAkB;AAE7C,eAAe;EACbC,UAAU,EAAE;IACVH,eAAe;IACfC;EACF,CAAC;EACDG,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,IAAI,EAAE,IAAI;MACVH,UAAU,EAAEA;IACd,CAAC;EACH,CAAC;EACDI,OAAOA,CAAA,EAAG;IACR,IAAI,CAACC,YAAY,CAAC,CAAC;IACnB,IAAI,CAACC,SAAS,CAAC,MAAM;MACnB,MAAMC,kBAAiB,GAAIC,QAAQ,CAACC,aAAa,CAAC,cAAc,CAAC;MACjE,IAAIF,kBAAkB,EAAE;QACtB;QACAG,CAAC,CAACC,WAAW,CAACC,IAAI,CAACL,kBAAkB,CAAC;MACxC;IACF,CAAC,CAAC;EACJ,CAAC;EACDM,OAAO,EAAE;IACPR,YAAYA,CAAA,EAAG;MACb,MAAMS,MAAK,GAAI,IAAI,CAACC,MAAM,CAACC,MAAM,CAACC,EAAE;MACpC;MACA,IAAI,CAACd,IAAG,GAAIH,UAAU,CAACkB,IAAI,CAAEf,IAAI,IAAKA,IAAI,CAACc,EAAC,KAAME,QAAQ,CAACL,MAAM,CAAC,CAAC;IACrE,CAAC;IACDM,iBAAiBA,CAACC,KAAK,EAAE;MACzB;MACA,MAAMC,OAAM,GAAI;QACd,oBAAoB,EAAE,WAAW;QACjC,6BAA6B,EAAE,UAAU;QACzC,kDAAkD,EAAE,mBAAmB;QACvE,gDAAgD,EAAE,eAAe;QACjE,0BAA0B,EAAE,mBAAmB;QAC/C,4BAA4B,EAAE,aAAa;QAC3C,iDAAiD,EAAE,QAAQ;QAC3D,2BAA2B,EAAE,OAAO;QACpC,kCAAkC,EAAE;MACtC,CAAC;MAED,OAAOA,OAAO,CAACD,KAAK,KAAK,EAAE,EAAE;IAC7B,CAAC;;IACDE,mBAAmBA,CAACC,KAAK,EAAEC,YAAY,EAAE;MACvC;MACA;MACA,OAAO,wBAAuB,GAAID,KAAI,GAAI,MAAK,GAAIC,YAAY;IACjE;EACF;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}